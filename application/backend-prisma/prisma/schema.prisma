// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    Int     @id @default(autoincrement())
  email String  @unique
  name  String?

  TaskItem TaskItem[]
}

model TaskItem {
  id          Int       @id @default(autoincrement())
  title       String    @default("") @db.VarChar(255)
  description String?   @default("") @db.Text
  status      String    @default("open") @db.VarChar(255)
  user        User?     @relation(fields: [userId], references: [id])
  userId      Int?
  dueDate     DateTime?
  createdAt   DateTime  @default(now())
}

model Book {
  id            Int     @id @default(autoincrement())
  title         String  @default("") @db.VarChar(255)
  author        String? @default("") @db.VarChar(255)
  description   String? @default("") @db.Text
  publishedYear Int?

  createdAt DateTime @default(now())

  bookGenres BookGenre[]
}

model Genre {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(255)

  bookGenres BookGenre[]
}

model BookGenre {
  id      Int   @id @default(autoincrement())
  book    Book  @relation(fields: [bookId], references: [id])
  bookId  Int
  genre   Genre @relation(fields: [genreId], references: [id])
  genreId Int
}

model AuthUser {
  userId               Int      @id @default(autoincrement())
  userName             String   @db.VarChar(255)
  passwordHash         String   @db.VarChar(255)
  externalAuthProvider String?   @db.VarChar(255)
  externalAuthId       String?   @db.VarChar(255)
  email                String   @db.VarChar(255)
  createdAt            DateTime? @db.Timestamptz(6) @default(now())
  updatedAt            DateTime? @db.Timestamptz(6) @default(now())
  isActive             Boolean  @default(true)

  userRoles AuthUserRole[]
}

model AuthRole {
  roleId    Int      @id @default(autoincrement())
  roleName  String   @db.VarChar(255)
  createdAt DateTime? @db.Timestamptz(6) @default(now())
  updatedAt DateTime? @db.Timestamptz(6) @default(now())
  isActive  Boolean  @default(true)

  roleUsers AuthUserRole[]
}

model AuthUserRole {
  id        Int      @id @default(autoincrement())
  userId    Int
  roleId    Int
  createdAt DateTime? @db.Timestamptz(6) @default(now())
  updatedAt DateTime? @db.Timestamptz(6) @default(now())
  isActive  Boolean  @default(true)
  user      AuthUser @relation(fields: [userId], references: [userId])
  role      AuthRole @relation(fields: [roleId], references: [roleId])
}
